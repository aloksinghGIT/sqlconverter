SET SERVEROUTPUT ON
 
DECLARE
 
  /* Declaring the collection type */
 
  TYPE t_bulk_collect_test_tab IS TABLE OF test_table%ROWTYPE;
 
  /* Declaring the collection variable */
 
  l_tab t_bulk_collect_test_tab;
 
  CURSOR c_data IS SELECT * FROM test_table;
 
BEGIN
 
  /* Populate the array using BULK COLLECT that retrieves all rows in a single FETCH ,
     getting rid of row by row fetch in a loop */
 
  OPEN c_data;
  FETCH c_data BULK COLLECT INTO l_tab;
  CLOSE c_data;
 
  -- Process contents of collection here.
  DBMS_OUTPUT.put_line(l_tab.count || ' rows');
 
/* Accessing the collection type - Before Modify */
    FOR i IN l_tab.FIRST .. l_tab.LAST 
    LOOP
       EXIT WHEN i = 3;
       dbms_output.put_line('Before Modify- Row- '|| i || ': is '||l_tab(i).name);
       dbms_output.put_line('Before Modify- Row- '|| i || ': is '||l_tab(i).name);
    END LOOP;
 
/* Modifying collection element values */
    l_tab(2).name := 'Change Me';
 
/* Accessing the collection type â€“ After Modify */
    FOR i IN l_tab.FIRST .. l_tab.LAST 
    LOOP
       EXIT WHEN i = 3;
       dbms_output.put_line('After Modify- Row- '|| i || ': is '||l_tab(i).name);
    END LOOP;
 
   dbms_output.put_line('Program executed successfully.');
 
END;


/*********  2nd SAMPLE ***********************/
SET SERVEROUTPUT ON
DECLARE
  TYPE t_bulk_collect_test_tab IS TABLE OF test_table%ROWTYPE;
  l_tab    t_bulk_collect_test_tab := t_bulk_collect_test_tab();
BEGIN
 
  /* Populate the array using BULK COLLECT that retrieves all rows in a single FETCH ,
     Using SELECT INTO CLAUSE */
 
  SELECT *
  BULK COLLECT INTO l_tab
  FROM   test_table;
 
  DBMS_OUTPUT.put_line('Bulk count: (' || l_tab.count || ' rows): ' );
END;








/*************** 3rd Sample   *************/
SET SERVEROUTPUT ON
DECLARE 
CURSOR c1 IS SELECT ID FROM TEST_TABLE;
TYPE V_TAB IS TABLE OF INTEGER INDEX BY BINARY_INTEGER;
V_ID   V_TAB;
len INTEGER; 
BEGIN 
Open c1;
 LOOP
   /* Here we are using limit along with BULK COLLECT to limit the no of rows to 
     1000 for each loop */
   Fetch c1 bulk collect into V_ID limit 1000; 
   len:=V_ID.COUNT;
   DBMS_OUTPUT.PUT_LINE('len-'||len);
EXIT WHEN C1%NOTFOUND;
End loop;
 Close c1;
END;
/


/*************** 4th Sample   *************/
CREATE TABLE TEST_TABLE2 AS SELECT * FROM TEST_TABLE WHERE 1=2;
 
SET SERVEROUTPUT ON 

DECLARE
   TYPE V_TEST IS TABLE OF TEST_TABLE%ROWTYPE;
   V_TAB  V_TEST;
   V_COUNT INTEGER;
BEGIN
  
 SELECT t.*
     BULK COLLECT INTO V_TAB
     FROM TEST_TABLE t;
     
 FOR i IN V_TAB.FIRST .. V_TAB.LAST 
    LOOP
   if MOD(V_TAB(I).ID, 2) = 0 THEN
/* Modifying the value of array elements */
    V_TAB(I).name    := 'EVEN';
 
END IF;
    END LOOP;
    
   DBMS_OUTPUT.put_line('Retrieved-'||TO_CHAR (V_TAB.COUNT)||' rows');
 
SELECT COUNT(1) INTO V_COUNT FROM TEST_TABLE2;
 
   DBMS_OUTPUT.put_line ('BEFORE TABLE COUNT-'||V_COUNT);
 
   FORALL i IN 1 .. V_TAB.COUNT
 
      INSERT INTO TEST_TABLE2
                  (
                  ID, 
                   NAME,
                   LOGIN_DATE
                   )
             VALUES 
                   (
                   V_TAB(i).ID, 
                   V_TAB(i).NAME,
                   V_TAB(i).LOGIN_DATE
                   );
   
  SELECT COUNT(1) INTO V_COUNT FROM TEST_TABLE2;
 
   DBMS_OUTPUT.put_line ('AFTER TABLE COUNT-'||V_COUNT);
END;
/


/************ 5th Sample  *************/

FUNCTION GET_DLGTD_ROLES(P_RESFQN VARCHAR2,USERNAME VARCHAR2,P_TYPE VARCHAR2,P_START NUMBER,P_END NUMBER,P_APPNAME VARCHAR2,P_SEARCH VARCHAR2 DEFAULT NULL,REVIEW NUMBER DEFAULT 0,P_SCRT VARCHAR2 DEFAULT 'RL')
RETURN NT_DELGTD_ROLES
IS


OUT_REC OBJ_DELGTD_ROLES :=OBJ_DELGTD_ROLES(NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL);
DUMMY  OBJ_DELGTD_ROLES :=OBJ_DELGTD_ROLES(NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL);
PARENT_POLICY NT_DELGTD_ROLES := NT_DELGTD_ROLES(OUT_REC);

BEGIN

SELECT OBJ_DELGTD_ROLES (SEC_ROLEID ,
SEC_ROLE_NAME ,
SEC_ROLE_FQN ,
Type ,
APP_NAME ,
ROLE_STATUS ,
SEC_AGAP_TYPE ,
SEC_ROLEDESC ,
CHILD_STATUS ,
ACTIVE_STATUS ,
SEC_ROLETYPEID)
bulk collect into PARENT_POLICY from
(select SEC_ROLEID ,
SEC_ROLE_NAME ,
SEC_ROLE_FQN ,
Type ,
APP_NAME ,
ROLE_STATUS ,
SEC_AGAP_TYPE ,
SEC_ROLEDESC ,
CHILD_STATUS ,
ACTIVE_STATUS ,
SEC_ROLETYPEID from table(GET_DLGTD_ROLES_IN(P_RESFQN ,USERNAME ,P_TYPE ,P_START ,P_END ,P_APPNAME ,P_SEARCH ,REVIEW ,P_SCRT )))
;


RETURN PARENT_POLICY;
EXCEPTION WHEN OTHERS THEN
RETURN PARENT_POLICY;
END GET_DLGTD_ROLES;

/************  6th Sample ********************/

FUNCTION SEARCH_RULES(P_PATH VARCHAR2,P_SEARCH VARCHAR2,P_SCRT VARCHAR2,P_FIND NUMBER,P_LIND NUMBER ,USERNAME VARCHAR2)
 RETURN  NT_PAPUSERDETAILS_MAIN --PIPELINED DETERMINISTIC PARALLEL_ENABLE
 IS
 /*
 P_PATH --  APPLICATION OR APPLICATION GROUP
 P_SEARCH-- SEARCH EXPRESSION
 P_SCRT  -- SEARCH CRITERIA
 P_FIND  -- FIRST INDEX
 P_LIND ---LAST INDEX
 */

 OUT_REC PAPOBJ_USERDETAILS_MAIN:=PAPOBJ_USERDETAILS_MAIN(NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,null);
 DUMMY  PAPOBJ_USERDETAILS_MAIN:=PAPOBJ_USERDETAILS_MAIN(NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,null);
 P_USERDETAILS NT_PAPUSERDETAILS_MAIN:=NT_PAPUSERDETAILS_MAIN(OUT_REC);
 V_COUNT NUMBER;

 BEGIN

 SELECT  PAPOBJ_USERDETAILS_MAIN(SEC_USER_NAME ,SEC_USER_EMAIL ,SEC_AGAP_TYPE,SEC_USERID,SEC_USERFIRST_NAME,SEC_USERLAST_NAME,SEC_FQN,SEC_ATTRIBUTES,SEC_USERLABEL,SEC_ROLES,SEC_ACTIVE_STATUS)
 bulk collect into P_USERDETAILS from
 (SELECT SEC_USER_NAME ,SEC_USER_EMAIL ,SEC_AGAP_TYPE,SEC_USERID,SEC_USERFIRST_NAME,SEC_USERLAST_NAME,SEC_FQN,SEC_ATTRIBUTES,SEC_USERLABEL,SEC_ROLES,SEC_ACTIVE_STATUS FROM TABLE(SEARCH_RULES_in(P_PATH ,P_SEARCH ,P_SCRT ,P_FIND ,P_LIND ,USERNAME))
 );
 --
 --SELECT COUNT(*) INTO V_COUNT FROM TABLE(USER_SEARCH_IN(P_PATH ,P_SEARCH ,P_SCRT ,P_FIND ,P_LIND ,USERNAME)) ;
 --DBMS_OUTPUT.PUT_LINE('V_COUNT '||V_COUNT);
 RETURN P_USERDETAILS;
 --EXCEPTION WHEN OTHERS THEN
 --RETURN P_USERDETAILS;
 END SEARCH_RULES;

 
 /************  7th Sample ********************/
FUNCTION USERROLE_WITHREF(P_RESFQN VARCHAR2,USERNAME VARCHAR2,P_TYPE VARCHAR2,P_START NUMBER,P_END NUMBER,P_APPNAME VARCHAR2,P_SEARCH VARCHAR2 DEFAULT NULL,REVIEW NUMBER DEFAULT 0,P_SCRT VARCHAR2 DEFAULT 'RL')
RETURN NT_DELGTD_ROLES PARALLEL_ENABLE
IS

TYPE REFC IS REF CURSOR;
OUT_REC OBJ_DELGTD_ROLES :=OBJ_DELGTD_ROLES(NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL);
DUMMY  OBJ_DELGTD_ROLES :=OBJ_DELGTD_ROLES(NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL);
PARENT_POLICY NT_DELGTD_ROLES := NT_DELGTD_ROLES(OUT_REC);
PARENT_POLICY1 NT_DELGTD_ROLES := NT_DELGTD_ROLES(OUT_REC);
PARENT_POLICY2 NT_DELGTD_ROLES := NT_DELGTD_ROLES(OUT_REC);
PARENT_POLICY3 NT_DELGTD_ROLES := NT_DELGTD_ROLES(OUT_REC);

BEGIN
SELECT  OBJ_DELGTD_ROLES(SEC_ROLEID,SEC_ROLE_NAME,SEC_ROLE_FQN,TYPE,APP_NAME,ROLE_STATUS,SEC_AGAP_TYPE,SEC_ROLEDESC,CHILD_STATUS,ACTIVE_STATUS,SEC_ROLETYPEID)
BULK COLLECT INTO PARENT_POLICY1
 FROM  (SELECT  SEC_ROLEID,SEC_ROLE_NAME,SEC_ROLE_FQN,TYPE,APP_NAME,ROLE_STATUS,SEC_AGAP_TYPE,SEC_ROLEDESC,CHILD_STATUS,ACTIVE_STATUS,SEC_ROLETYPEID FROM
 TABLE(CAST(GET_DLGTD_ROLES(P_RESFQN,USERNAME,P_TYPE,1,-1,P_APPNAME,'*') AS NT_DELGTD_ROLES))) ;

SELECT  OBJ_DELGTD_ROLES(SEC_ROLEID,SEC_ROLE_NAME,SEC_ROLE_FQN,TYPE,APP_NAME,ROLE_STATUS,SEC_AGAP_TYPE,SEC_ROLEDESC ,CHILD_STATUS,ACTIVE_STATUS,SEC_ROLETYPEID)
BULK COLLECT INTO PARENT_POLICY2
FROM (
 SELECT SEC_ROLEGUID SEC_ROLEID, SEC_ROLENAME SEC_ROLE_NAME,SEC_ROLE_FQN,SEC_PARENTROLEID,'Role' AS TYPE,SEC_ROLE_STATUS ROLE_STATUS,SEC_AGAP_TYPE,
SEC_ROLEDESC,CASE WHEN SEC_AGAP_TYPE='AG' THEN SUBSTR(SEC_ROLE_FQN||':',1,INSTR(SEC_ROLE_FQN||':',':',1,1))  ELSE
 SUBSTR(SEC_ROLE_FQN||':',1,INSTR(SEC_ROLE_FQN||':',':',2,2)) END AS APP_NAME,'' CHILD_STATUS,'' ACTIVE_STATUS,'' SEC_ROLETYPEID  FROM SEC_ROLE_MASTER
   START WITH SEC_ROLE_FQN IN (SELECT SEC_ROLE_FQN||':'||SEC_ROLE_NAME FROM TABLE(CAST(PARENT_POLICY1 AS  NT_DELGTD_ROLES)))   CONNECT BY PRIOR SEC_ROLEGUID=SEC_PARENTROLEID AND SEC_ROLEGUID!=SEC_PARENTROLEID
 )  ;


SELECT  OBJ_DELGTD_ROLES(SEC_ROLEID,SEC_ROLE_NAME,SEC_ROLE_FQN,TYPE,APP_NAME,ROLE_STATUS,SEC_AGAP_TYPE,SEC_ROLEDESC,CHILD_STATUS,ACTIVE_STATUS,SEC_ROLETYPEID)
BULK COLLECT INTO PARENT_POLICY3
FROM (
  SELECT SEC_ROLEID SEC_ROLEID,SEC_ROLE_NAME , SEC_ROLE_FQN , TYPE  ,  APP_NAME APP_NAME,ROLE_STATUS , SEC_AGAP_TYPE , SEC_ROLEDESC ,
   CAST(CHILD_STATUS AS VARCHAR(10)) CHILD_STATUS, ACTIVE_STATUS,SEC_ROLETYPEID  FROM
    ( SELECT  SEC_ROLEID,SEC_ROLE_NAME SEC_ROLE_NAME,SEC_ROLE_FQN, TYPE,APP_NAME,ROLE_STATUS ROLE_STATUS,
    SEC_AGAP_TYPE,SEC_ROLEDESC , CASE WHEN SEC_ROLEID IN (SELECT  SEC_PARENTROLEID FROM SEC_ROLE_MASTER WHERE SEC_ROLEGUID!=SEC_PARENTROLEID) THEN 'FALSE' ELSE 'TRUE'
END AS CHILD_STATUS,'' ACTIVE_STATUS,SEC_ROLETYPEID  FROM
(
SELECT * FROM TABLE(CAST(PARENT_POLICY2 AS  NT_DELGTD_ROLES)) A WHERE
  NOT EXISTS
   (SELECT 1 FROM TABLE(CAST(PARENT_POLICY1 AS  NT_DELGTD_ROLES)) B WHERE A.SEC_ROLEID=B.SEC_ROLEID)  AND   A.SEC_ROLE_NAME LIKE P_SEARCH )


    )
 )  ;


   SELECT OBJ_DELGTD_ROLES(SEC_ROLEID,SEC_ROLE_NAME,SEC_ROLE_FQN,TYPE,APP_NAME,ROLE_STATUS,SEC_AGAP_TYPE,SEC_ROLEDESC,CHILD_STATUS,ACTIVE_STATUS,SEC_ROLETYPEID)
     BULK COLLECT INTO PARENT_POLICY
    FROM
 (SELECT SEC_ROLEID,SEC_ROLE_NAME ,SEC_ROLE_FQN , TYPE  , APP_NAME ,ROLE_STATUS , SEC_AGAP_TYPE ,SEC_ROLEDESC,CHILD_STATUS ,NVL(ACTIVE_STATUS,'') ACTIVE_STATUS ,SEC_ROLETYPEID
  FROM TABLE(CAST(PARENT_POLICY1 AS  NT_DELGTD_ROLES))

   UNION

    SELECT SEC_ROLEID,SEC_ROLE_NAME,SEC_ROLE_FQN,TYPE,APP_NAME,ROLE_STATUS,SEC_AGAP_TYPE,SEC_ROLEDESC,CHILD_STATUS,ACTIVE_STATUS,SEC_ROLETYPEID
      FROM TABLE(CAST(PARENT_POLICY3 AS  NT_DELGTD_ROLES))
    )  ORDER BY UPPER(SEC_ROLE_NAME) ;

    RETURN  PARENT_POLICY;
    END ;
